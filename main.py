import asyncio
import logging
import os
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from motor.motor_asyncio import AsyncIOMotorClient
import openai
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
MONGODB_URL = os.getenv("MONGODB_URL")
DATABASE_NAME = os.getenv("DATABASE_NAME")


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/app/logs/bot.log') if os.path.exists('/app/logs/bot.log') else logging.StreamHandler(),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if BOT_TOKEN == "":
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    exit(1)

if OPENAI_API_KEY == "":
    logger.error("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()

openai.api_key = OPENAI_API_KEY

mongo_client = AsyncIOMotorClient(MONGODB_URL)
db = mongo_client[DATABASE_NAME]
users_collection = db.users
chats_collection = db.chats


class BotStates(StatesGroup):
    waiting_for_topic = State()
    chatting = State()




class User:
    def __init__(self, user_id: int, username: str = None, topic: str = None, notification_interval: int = None, last_message_time: datetime = None):
        self.user_id = user_id
        self.username = username
        self.topic = topic
        self.notification_interval = notification_interval
        self.last_message_time = last_message_time


class ChatMessage:
    def __init__(self, user_id: int, role: str, content: str, timestamp: datetime = None):
        self.user_id = user_id
        self.role = role
        self.content = content
        self.timestamp = timestamp or datetime.now()



async def get_user(user_id: int) -> Optional[Dict[str, Any]]:
    try:
        return await users_collection.find_one({"user_id": user_id})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}: {e}")


async def create_or_update_user(user_data: Dict[str, Any]) -> None:
    try:
        await users_collection.update_one(
            {"user_id": user_data["user_id"]},
            {"$set": user_data},
            upsert=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")



async def get_chat_history(user_id: int, limit: int = 50) -> list:
    try:
        cursor = chats_collection.find({"user_id": user_id}).sort("timestamp", -1).limit(limit)

        messages = []
        async for message in cursor:
            messages.append({
                "role": message["role"],
                "content": message["content"],
            })
        return list(reversed(messages))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []



async def save_message(user_id:int , role: str, content: str) -> None:
    try:
        message_data = {
            "user_id": user_id,
            "role": role,
            "content": content,
            "timestamp": datetime.now()
        }
        await chats_collection.insert_one(message_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def clear_chat_history(user_id: int) -> None:
    try:
        await chats_collection.delete_many({"user_id": user_id})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")



async def get_chatgpt_response(user_id: int, user_message: str, topic: str = None) -> str:
    try:
        chat_history = await get_chat_history(user_id)
        messages = []

        if topic:
            system_message = f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –±–µ—Å–µ–¥—É –Ω–∞ —Ç–µ–º—É: '{topic}'. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π —Ç–µ–º—ã –∏ –ø–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∏–≥–∞—Ç—å –µ–≥–æ —Ü–µ–ª–µ–π."
            messages.append({"role": "system", "content": system_message})


        messages.extend(chat_history)

        messages.append({"role": "user", "content": user_message})

        response = await openai.ChatCompletion.acreate(
            model="gpt-4o-mini",
            messages=messages,
            temperature=0.7,
        )

        return response.choices[0].message.content

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        return f"–°–æ—Ä—è–Ω, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT:\n{e}"


def get_start_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É", callback_data="update_topic")],
        [InlineKeyboardButton(text="‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="ignore_start")]
    ])
    return keyboard


def get_notification_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è∞ –ö–∞–∂–¥—ã–π —á–∞—Å", callback_data="notify_1")],
        [InlineKeyboardButton(text="‚è∞ –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞", callback_data="notify_3")],
        [InlineKeyboardButton(text="‚è∞ –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤", callback_data="notify_6")],
        [InlineKeyboardButton(text="‚è∞ –ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤", callback_data="notify_12")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notify_off")]
    ])
    return keyboard


@dp.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username

    user = await get_user(user_id)

    if not user or not user.get("topic"):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è.\n\n"
            "üìù –ó–∞–¥–∞–π —Ç–µ–º—É –¥–ª—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è:"
        )
        await state.set_state(BotStates.waiting_for_topic)

        user_data = {
            "user_id": user_id,
            "username": username,
            "topic": None,
            "notification_interval": None,
            "last_message_time": datetime.now()
        }
        await create_or_update_user(user_data)

    else:
        await message.answer(
            f"ü§î –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞: '{user['topic']}'\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=get_start_keyboard()
        )


@dp.message(Command("restart"))
async def restart_command(message: Message, state: FSMContext):
    user_id = message.from_user.id

    await clear_chat_history(user_id)

    await message.answer(
        "üîÑ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!\n\n"
        "üìù –ó–∞–¥–∞–π –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è:"
    )
    await state.set_state(BotStates.waiting_for_topic)


@dp.message(Command("notify"))
async def notify_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notify"""
    await message.answer(
        "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö:",
        reply_markup=get_notification_keyboard()
    )


@dp.message(Command("status"))
async def status_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user = await get_user(user_id)

    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        return

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_count = await chats_collection.count_documents({"user_id": user_id})

    status_text = f"""üìä **–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:**
        üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}
        üéØ **–¢–µ–º–∞:** {user.get('topic', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')}
        üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π:** {message_count}
        üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {'–ö–∞–∂–¥—ã–µ ' + str(user.get('notification_interval', 0)) + ' —á.' if user.get('notification_interval') else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
        ‚è∞ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** {user.get('last_message_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        
        **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
        /start - –ù–∞—á–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É
        /restart - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        /notify - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        /status - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å"""

    await message.answer(status_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data == "update_topic")
async def update_topic_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã"""
    await callback.message.edit_text(
        "üîÑ –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º —Ç–µ–º—É!\n\n"
        "üìù –ó–∞–¥–∞–π –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è:"
    )
    await state.set_state(BotStates.waiting_for_topic)
    await callback.answer()


@dp.callback_query(F.data == "ignore_start")
async def ignore_start_callback(callback: CallbackQuery, state: FSMContext):
    """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.set_state(BotStates.chatting)
    await callback.message.edit_text("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ!")
    await callback.answer()


@dp.callback_query(F.data.startswith("notify_"))
async def notification_callback(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    action = callback.data.split("_")[1]

    if action == "off":
        # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await create_or_update_user({
            "user_id": user_id,
            "notification_interval": None
        })
        await callback.message.edit_text("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            scheduler.remove_job(f"notify_{user_id}")
        except:
            pass

    else:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        interval = int(action)
        await create_or_update_user({
            "user_id": user_id,
            "notification_interval": interval
        })

        await callback.message.edit_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –∫–∞–∂–¥—ã–µ {interval} —á–∞—Å(–∞/–æ–≤)"
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        setup_notification_job(user_id, interval)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–º—ã
@dp.message(StateFilter(BotStates.waiting_for_topic))
async def handle_topic_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã"""
    user_id = message.from_user.id
    topic = message.text.strip()

    if len(topic) < 3:
        await message.answer("‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é —Ç–µ–º—É.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await create_or_update_user({
        "user_id": user_id,
        "topic": topic,
        "last_message_time": datetime.now()
    })

    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
    await clear_chat_history(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–º—É) –≤ –∏—Å—Ç–æ—Ä–∏—é
    msg = f"–Ø —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π –Ω–∞ —Ç–µ–º—É: '{topic}'. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫, —É–±–µ–¥–∏—Ç–µ–ª–µ–Ω, –∂–µ—Å—Ç–æ–∫ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –ø—Ä–∞–≤–¥–µ. –ú–Ω–µ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –Ω–µ –Ω—è–Ω—á–∏–ª—Å—è —Å–æ –º–Ω–æ–π, –∞ –ø–æ–º–æ–≥ –º–Ω–µ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏. –Ø —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –º–∞—Ç–µ—Ä–∏–ª—Å—è –¥–ª—è –ø—É—â–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –¥–∞–≤–∞—Ç—å –º–Ω–µ –ø–µ–Ω–¥–µ–ª–∏, –∞ –Ω–µ –ø—Ä—è–Ω–∏–∫–∏"
    await save_message(user_id, "user", msg)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
    response = await get_chatgpt_response(user_id, topic, topic)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await save_message(user_id, "assistant", response)

    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: '{topic}'\n\n"
        f"ü§ñ {response}"
    )

    await state.set_state(BotStates.chatting)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(StateFilter(BotStates.chatting))
async def handle_chat_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
    user_id = message.from_user.id
    user_message = message.text

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(user_id)
    if not user or not user.get("topic"):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await create_or_update_user({
        "user_id": user_id,
        "last_message_time": datetime.now()
    })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(user_id, "user", user_message)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
    response = await get_chatgpt_response(user_id, user_message, user["topic"])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    await save_message(user_id, "assistant", response)

    await message.answer(response)


@dp.message()
async def handle_other_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    user = await get_user(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ç–µ–º–∞, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
    if user and user.get("topic"):
        await state.set_state(BotStates.chatting)
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        await handle_chat_message(message)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–ª–∏ –Ω–µ—Ç —Ç–µ–º—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
    await message.answer(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "‚ñ´Ô∏è /start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "‚ñ´Ô∏è /restart - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "‚ñ´Ô∏è /notify - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚ñ´Ô∏è /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def setup_notification_job(user_id: int, interval_hours: int):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    job_id = f"notify_{user_id}"

    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        scheduler.remove_job(job_id)
    except:
        pass

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    scheduler.add_job(
        send_notification,
        trigger=IntervalTrigger(hours=interval_hours),
        args=[user_id],
        id=job_id,
        replace_existing=True
    )

    logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–æ–≤")


async def send_notification(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        user = await get_user(user_id)
        if not user or not user.get("notification_interval"):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user.get("last_message_time"):
            time_diff = datetime.now() - user["last_message_time"]
            required_interval = timedelta(hours=user["notification_interval"])

            if time_diff >= required_interval:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ChatGPT
                reminder_message = "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –æ –º–æ–∏—Ö —Ü–µ–ª—è—Ö. –ó–∞–º–æ—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è –∏–ª–∏ –Ω–∞–ø–æ–º–Ω–∏ –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ. –ù–µ –ø–∏—à–∏ '–•–æ—Ä–æ—à–æ –∏ —Ç–¥ —Ç–ø'. –ü—Ä–æ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ –ø–æ —Ñ–∞–∫—Ç–∞–º —Ä–∞—Å–∫–∏–¥–∞–π —á—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ —è –±—É–¥—É –¥–∞–ª—å—à–µ –µ–±–ª–∞–Ω–∏—Ç—å –∏ —á—Ç–æ –±—É–¥–µ—Ç —Å–æ –º–Ω–æ–π, –µ—Å–ª–∏ —è –±—É–¥—É –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –µ–±–∞—à–∏—Ç—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤ –∏–ª–∏ –ª–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"
                response = await get_chatgpt_response(user_id, reminder_message, user["topic"])

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                await save_message(user_id, "user", reminder_message)
                await save_message(user_id, "assistant", response)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await bot.send_message(
                    user_id,
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö:\n\n{response}"
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await create_or_update_user({
                    "user_id": user_id,
                    "last_message_time": datetime.now()
                })

                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await mongo_client.admin.command('ping')
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_list = await mongo_client.list_database_names()
        if DATABASE_NAME in db_list:
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DATABASE_NAME}' –Ω–∞–π–¥–µ–Ω–∞")
        else:
            logger.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DATABASE_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
        return False


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI Telegram Bot...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not await check_database_connection():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async for user in users_collection.find({"notification_interval": {"$ne": None}}):
            setup_notification_job(user["user_id"], user["notification_interval"])

        logger.info("‚úÖ –ó–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)

    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        scheduler.shutdown()
        await bot.session.close()
        mongo_client.close()
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('/app/logs', exist_ok=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())